Working with data
========================================================
author: Christophe Lalanne
date: September 29th, 2015
css: custom.css

```{r, include=FALSE}
library(xtable)
library(knitcitations)
#cite_options(tooltip=TRUE)
bib <- read.bibtex("../refs.bib")
opts_chunk$set(cache=TRUE)
options(reindent.spaces=2)
set.seed(101)
```

Synopsis
========================================================
type: sub-section

The plural of anecdote is (not) data.  
<small>
<http://blog.revolutionanalytics.com/2011/04/the-plural-of-anecdote-is-data-after-all.html>
</small>

> What are data • How do we collect data • How do we store data • How to process data with R

The world of data
========================================================

Data come in various forms, and they are gathered from many different sources:

- personal daily records
- observational studies
- controlled experiments
- historical archives
- national surveys, etc.

They almost always require preprocessing, cleaning, and recoding---and this often amounts to 60% of the whole statistical project.

How to collect data
========================================================

- Simple random sampling: each individual from the population has the same probability of being selected; this is usually done **without replacement** (e.g., surveys, psychological experiment, clinical trials).
- Systematic random sampling, (two-stage) cluster sampling, stratified sampling, etc.

In the end, we must have a **random sample** of statistical units with single or multiple observations on each unit. With this sample, we usually aim at inferring some properties at the level of the population from which this 'representative' `r citep(bib["selz13"])` sample was drawn.


How to store data
========================================================

Better to rely on **plain text files** (space, tab or comma-delimited) or **database** (SQL family) whenever possible: 
- easy access to data (in an OS agnostic way)
- availability of reliable query languages
- recording of each data step in text files
- easy storage and sharing of data

The last two points are part of what is called **reproducible research** `r citep(bib["peng09"])`.

Data processing
========================================================

- full sample single CSV file ([RFC4180](http://tools.ietf.org/html/rfc4180))
- binary data files (`.mat`, `.sav`, `.dta`)
- individual data files, possibly compressed (require globbing)

Data can also be served through different files, e.g. dual files like Nifti `.hdr`+`.img`, or PLINK `.bed`+`.bim` (require merging).

Text-based data file are generally easy to process with many text processing programs, e.g., sed, awk, Perl `r citep(bib["chambers08"])`, but we will see that R offers nice facilities for that kind of stuff too.

A ready to use data set
========================================================

Observers rated relatedness of pairs of images of children that were either siblings or not on a 11-point scale.

```{r, echo=FALSE, results='asis'}
data(Faces, package="MPDiR")
#head(Faces, n=4, addrownums=FALSE)
print(xtable(head(Faces)), type="html")
```

<small>Maloney, L. T., and Dal Martello, M. F. (2006). Kin recognition and the perceived facial similarity of children. Journal of Vision, 6(10):4, 1047–1056, http://journalofvision.org/6/10/4/.</small>

Real-life data
========================================================

Raw data generally require [**data cleansing**](http://bit.ly/19BqCen).

```{r, echo=FALSE, results='asis'}
d <- read.csv("../data/raw.csv")[-1,]
print(xtable(d), type="html", include.rownames=FALSE)
```

What does `recover` = 0 or `sex` = 1 mean? Are negative values allowed for `session`? Leading zeros in IDs and centre number are lost. We need a **data dictionary**.

    $ head -n 3 data/raw.csv
    id,centre,sex,age,session,recover
    ,,,,years,
    01017,01,1,23,8,0

Data analysis as an iterative process
========================================================

![](./img/fig-repl_stats.png)

---
 
- importing
- manipulating
- plotting
- transforming
- aggregating
- summarizing
- modelling
- reporting


Getting started with R
========================================================

[R](http://www.r-project.org) is a statistical package for working with data `r citep(bib[c("ihaka96","venables02")])`. It features most of modern statistical tools, and convenient functions to import, manipulate and visualize even high-dimensional data sets. There is usually no need to switch to another program throughout project management. 

It is open-source (GPL licence), and it has a very active community of users ([r-help](https://stat.ethz.ch/mailman/listinfo/r-help), [Stack Overflow](http://stackoverflow.com/questions/tagged/r)). 

Moreover, some mathematical or statistical packages (e.g., Mathematica, SPSS) feature built-in plugins to interact with R. It can also be used with Python ([rpy2](http://rpy.sourceforge.net/rpy2.html)). 

R is not a cliquodrome
========================================================

R is interactive ([read-eval-print loop](http://bit.ly/1axiCiM)) and can be used as a simple calculator:
```{r}
r <- 5
2 * pi * r^2
```

Basically, R interprets commands that are sent by the user, and returns an output (which might be nothing). 
The syntax of the language is close to that of any programming language: we process data associated to **variables** with the help of dedicated **commands** (functions).

Note that many additional **packages** are available on <http://cran.r-project.org>, and we will use few of them.

RStudio
========================================================

[RStudio](http://www.rstudio.com/) offers a clever, non-intrusive, interface to R, including specific panels for the R console, history, workspace, plots, help, packages management. 

It now features project management, version control, and it has built-in support for automatic reporting through the Markdown language.

- John Verzani (2011). [*Getting started with RStudio*](http://shop.oreilly.com/product/0636920021278.do). O'Reilly Media.
- Mark P.J. van der Loo, Edwin de Jonge (2012). [*Learning RStudio for R Statistical Computing*](http://www.packtpub.com/learning-rstudio-for-r-statistical-computing/book). Packt Publishing.


Interacting with R
========================================================

Here is a sample session. 

First, we **load some data** into R:
```{r load}
bs <- read.table(file = "../data/brain_size.dat", 
                 header = TRUE, na.strings = ".")
head(bs, n = 2)
```

Rectangular data set
========================================================

Here is how the data would look under a spreedsheat program:

![excel](./img/brain_size.png)

Variables are arranged in columns, while each line represents an individual (i.e., a statistical unit).

Querying data properties with R
========================================================

Let's look at some of the properties of the imported data set:
```{r object}
dim(bs)
names(bs)[1:4]
```
There are 40 individuals and 7 variables. Variables numbered 1 to 4 are: gender, full scale IQ, verbal IQ, and performance IQ.

Querying data properties with R
========================================================
title: false

Now, here is how observed values for each variable are represented internally:
```{r}
str(bs, vec.len = 1)
```

Variables are either **numeric** (continuous or discrete) or **categorical** (with ordered or unordered levels). 

Note that there exist other representations for working with dates, censored variables, or strings.


Testing, organizing, versioning
========================================================

RStudio greatly facilitates the data analysis workflow: Rather than writing directly R commands in the console, write them in an R script and run the code from the editor.

![rstudio](./img/01-intro.png)


References
========================================================

<small>
```{r, echo=FALSE, results='asis'}
bibliography()
```
</small>